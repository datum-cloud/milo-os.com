name: Quality Checks

on:
  pull_request:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'env.example'
      - '.vscode/**'
      - 'public/pagefind/**'
      - '**/pagefind/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: production
  BUN_CACHE: ~/.bun/install/cache

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BUN_CACHE }}
            **/node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/bun.lock', '**/package.json') }}

      - name: Install Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

  lint:
    needs: install
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BUN_CACHE }}
            **/node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/bun.lock', '**/package.json') }}

      - name: Run Lint
        run: bun run lint

  typecheck:
    needs: install
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BUN_CACHE }}
            **/node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/bun.lock', '**/package.json') }}

      - name: Run Type Check
        run: bun run check

  build:
    needs: [lint, typecheck]
    name: Build
    runs-on: ubuntu-latest
    if: ${{ !failure() && !cancelled() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BUN_CACHE }}
            **/node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/bun.lock', '**/package.json') }}

      - name: Build
        run: bun run build

      - name: Cache Build
        uses: actions/cache@v4
        with:
          path: dist
          key: build-${{ github.sha }}
  e2e:
    needs: build
    name: End-to-End Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BUN_CACHE }}
            **/node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/bun.lock', '**/package.json') }}

      - name: Install Playwright Browsers
        run: npx playwright install chromium

      - name: Run E2E Tests
        run: bun run test:e2e
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
  
  # docker:
  #   needs: build
  #   name: Docker Build
  #   runs-on: ubuntu-latest
  #   if: ${{ !failure() && !cancelled() }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Build Docker Image (Production)
  #       run: docker compose build --no-cache prod

  #     - name: Build Docker Image (Development)
  #       run: docker compose build --no-cache dev

  status-check:
    needs: [install, lint, typecheck, build]
    name: Final Status Check
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check Workflow Status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ Workflow failed because one or more jobs failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "⚠️ Workflow cancelled because one or more jobs were cancelled"
            exit 1
          else
            echo "✅ All jobs completed successfully"
          fi