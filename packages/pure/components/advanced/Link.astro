---
import { Image } from 'astro:assets';
import type { HTMLTag, Polymorphic } from 'astro/types';

import { cn } from '../../utils';
import { Button, FormattedDate, Icon } from '../user';

type LinkData = {
  title: string;
  url: string;
  description?: string;
  image?: {
    src: string;
    alt?: string;
    color?: string;
  };
  tags?: string[];
  addedDate?: Date;
  draft?: boolean;
};

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
  link: LinkData;
  detailed?: boolean;
  class?: string;
};

const { as: Tag = 'div', link, detailed = false, class: className } = Astro.props;

const { title, url, description, image, tags, addedDate, draft } = link;
// const domain = new URL(url).hostname.replace('www.', '');
---

<li
  class={cn(
    'link-preview group/card flex flex-col relative rounded-2xl border bg-background transition-colors ease-in-out px-5 py-2.5 hover:bg-muted',
    detailed && 'max-sm:px-4 sm:py-5',
    className
  )}
  style={detailed &&
    image?.color &&
    `--preview-highlight:color-mix(in srgb,${image.color} 40%,hsl(var(--foreground)/var(--un-text-opacity,1)));
    --preview-highlight-bg:hsl(from ${image.color} h s l/20%)`}
>
  <a
    class={cn(
      'group/link w-full flex flex-col transition-all hover:text-primary',
      !detailed && 'sm:flex-row',
      detailed && image && 'max-md:pt-24'
    )}
    href={url}
    target="_blank"
    rel="noopener noreferrer"
  >
    {
      detailed && image && (
        <Image
          alt={image.alt || title}
          class="cover-image absolute end-0 top-0 z-0 h-2/3 w-full rounded-2xl object-cover opacity-50 transition-opacity duration-300 group-hover/card:opacity-70 md:h-full md:w-3/5"
          loading="eager"
          src={image.src}
          width={800}
          height={400}
        />
      )
    }

    {addedDate && <FormattedDate class="min-w-[95px] py-1 text-xs" date={addedDate} />}

    <Tag class="z-10 flex-grow">
      {/* title */}
      <div class="flex justify-between">
        <div class={detailed && 'font-medium'}>
          {draft && <span class="text-red-500">(Draft) </span>}
          {title}
        </div>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke-width="2.5"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="preview-redirect my-1 stroke-muted-foreground group-hover/link:stroke-primary"
        >
          <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
          <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
        </svg>
      </div>
      {
        detailed && (
          <>
            {/* desc */}
            <p
              class={cn(
                'line-clamp-2 pt-1 text-sm text-muted-foreground sm:line-clamp-3',
                image && 'sm:me-24'
              )}
            >
              {description}
            </p>
            <div class="flex items-center gap-2 py-1.5 text-sm italic leading-4 text-muted-foreground sm:py-3">
              {/* external link indicator */}
              <span class="flex items-center gap-1 mr-2">
                <Icon name="link" class="size-4" />
                External
              </span>
              {/* domain */}
              <span class="flex items-center gap-1">
                <Icon name="earth" class="size-4" />
                {/* {domain} */}
                {url}
              </span>
            </div>
          </>
        )
      }
    </Tag>
  </a>
  <!-- tags -->
  {
    detailed && tags && tags.length > 0 && (
      <ul class="tag-list mt-1 flex flex-wrap gap-2">
        {tags.map((tag: string) => (
          <li>
            <Button title={tag} href={`/tags/${tag}`} style="pill" />
          </li>
        ))}
      </ul>
    )
  }
</li>

<style>
  .link-preview {
    --preview-highlight-final: var(
      --preview-highlight,
      hsl(var(--primary) / var(--un-text-opacity, 1))
    );
  }
  .link-preview:hover {
    &,
    & .tag-list a {
      background-color: var(
        --preview-highlight-bg,
        hsl(var(--muted) / var(--un-bg-opacity, 1))
      ) !important;
    }
    & > a,
    & .tag-list a:hover {
      color: var(--preview-highlight-final) !important;
    }
    & > a .preview-redirect {
      stroke: var(--preview-highlight-final) !important;
    }
  }
  .cover-image {
    mask-image: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
    -ms-mask-image: -ms-linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
    -webkit-mask-image: -webkit-linear-gradient(
      to right,
      rgba(0, 0, 0, 0) 0%,
      rgba(0, 0, 0, 1) 100%
    );
  }

  @media (max-width: 768px) {
    .cover-image {
      mask-image: linear-gradient(to top, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
      -ms-mask-image: -ms-linear-gradient(to top, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
      -webkit-mask-image: -webkit-linear-gradient(
        to top,
        rgba(0, 0, 0, 0) 0%,
        rgba(0, 0, 0, 1) 100%
      );
    }
  }
</style>
