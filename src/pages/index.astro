---
import { Image } from 'astro:assets';
import { getEntry } from 'astro:content';

// import { Quote } from 'astro-pure/advanced';
// import { PostPreview } from 'astro-pure/components/pages';
import { Link } from '@packages/pure/components/advanced';
// import { Button, Card /*, Icon, Label */ } from 'astro-pure/user';
import { Button, Card, Timeline /*, Icon, Label */ } from '@packages/pure/components/user';
import PageLayout from '@/layouts/BaseLayout.astro';
// import ProjectCard from '@/components/home/ProjectCard.astro';
import Section from '@/components/home/Section.astro';
// import SkillLayout from '@/components/home/SkillLayout.astro';
import miloHi from '@/assets/milo-hello.png';
import { roadmapEvents } from '../data/roadmap';
// import config from '@/site-config';

// const languages = ['Html', 'JavaScript', 'CSS', 'Shell'];
// const frontend = ['TypeScript', 'Vite', 'Webpack', 'Astro'];
// const backend = ['Vercel', 'Waline'];

/*
import { getBlogCollection } from 'astro-pure/server';

const MAX_POSTS = 10;
const allPosts = await getBlogCollection();
const allPostsByDate = allPosts
  .sort((a, b) => {
    const aDate = a.data.publishDate ? a.data.publishDate.valueOf() : 0;
    const bDate = b.data.publishDate ? b.data.publishDate.valueOf() : 0;
    return bDate - aDate;
  })
  .slice(0, MAX_POSTS);
*/

// Get changelog data
const changelogEntry = await getEntry('pages', 'changelog');

// Parse the latest 2 versions from changelog content
interface VersionData {
  version: string;
  date: string;
  features: string[];
}
let latestVersions: VersionData[] = [];
if (changelogEntry && changelogEntry.body) {
  const content = changelogEntry.body;
  // console.log('Raw changelog content:', content.substring(0, 500) + '...');
  // Split by version headers and filter out empty sections
  const sections = content.split(/(?=## Version)/).filter((section) => section.trim());

  latestVersions = sections
    .slice(0, 3)
    .map((section) => {
      const lines = section.trim().split('\n');
      const versionLine = lines[0];
      // console.log(`Processing section ${index}, version line:`, versionLine);
      const versionMatch = versionLine.match(/## Version v([\d.]+) - (.+)/);

      if (versionMatch) {
        // console.log(`Found version ${versionMatch[1]} - ${versionMatch[2]}`);
        // Extract features from the content
        const contentLines = lines.slice(1);
        const featuresStart = contentLines.findIndex((line) =>
          line.includes('### ðŸš€ New Features')
        );
        const featuresEnd = contentLines.findIndex(
          (line, index) => index > featuresStart && line.startsWith('###')
        );

        let features: string[] = [];
        if (featuresStart !== -1) {
          const endIndex = featuresEnd === -1 ? contentLines.length : featuresEnd;
          features = contentLines
            .slice(featuresStart + 1, endIndex)
            .filter((line: string) => line.startsWith('- **'))
            .slice(0, 3); // Get first 3 features
          // console.log( `Extracted ${features.length} features for version ${versionMatch[1]}:`, features );
        } else {
          // console.log(`No features section found for version ${versionMatch[1]}`);
        }

        return {
          version: 'v' + versionMatch[1],
          date: versionMatch[2].trim(),
          features: features,
        };
      }
      return null;
    })
    .filter((item): item is VersionData => item !== null);

  // console.log('Parsed versions:', JSON.stringify(latestVersions, null, 2));
}
---

<PageLayout meta={{ title: 'Home' }} highlightColor="#659EB9">
  <main class="flex w-full flex-col items-center">
    <section
      class="flex md:items-end flex-col md:flex-row md:gap-y-0 gap-x-8 bg-winter-sky rounded-lg w-full p-8 pb-0 mb-8"
    >
      <div class="flex items-center justify-center mb-8 md:mb-0">
        <Image src={miloHi} alt="profile" class="w-full max-w-84 self-center" loading="eager" />
      </div>
      <div class="text-left flex flex-col gap-y-2 mb-8 md:mb-0 pb-8">
        <h2 class="text-3xl font-bold">Meet Milo. The brain behind your Alt Cloud.</h2>
        <p class="text-xl">
          Think Milo as an open source business OS built to help you grow, scale, and focus on your
          productâ€”not backend plumbing.
        </p>
      </div>
    </section>

    <div id="content" class="animate flex flex-col gap-y-10 md:w-4/5 lg:w-5/6 pt-6">
      <Section title="About">
        <p class="text-muted-foreground">
          Milo is a "business operating system" for product-led, B2B companies. Think of it like a
          control plane for modern service providers, built on top of a comprehensive system of
          record that ties together key parts of your business.
        </p>
        <Button title="Why we're building Milo" class="w-fit self-end" href="/about" style="ahead" />
      </Section>

      <Section title="Roadmap">
        <Timeline events={roadmapEvents} />
        <Button title="View full roadmap" class="w-fit self-end" href="/roadmap" style="ahead" />
      </Section>

      {
        latestVersions.length > 0 && (
          <Section title="Changelog">
            {latestVersions.map((version) => (
              <Card heading={`Version ${version.version}`} date={version.date}>
                <div class="text-muted-foreground prose prose-sm max-w-none">
                  {version.features && version.features.length > 0 && (
                    <div class="mb-3 pt-4 pb-2">
                      <h4 class="font-semibold text-foreground mb-1">ðŸš€ New Features</h4>
                      <ul class="list-disc list-inside space-y-1">
                        {version.features.map((feature: string) => (
                          <li class="text-sm">{feature.replace(/^- \*\*([^*]+)\*\*: /, '$1: ')}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </Card>
            ))}
            <Button
              title="View full changelog"
              class="w-fit self-end"
              href="/changelog"
              style="ahead"
            />
          </Section>
        )
      }

      <Section title="Links">
        <ul class="flex flex-col gap-y-1.5 sm:gap-y-2">
          <Link
            link={{
              title: 'Docs',
              url: 'https://docs.datum.net/docs/overview/',
            }}
          />
          <Link
            link={{
              title: 'API',
              url: 'https://docs.datum.net/docs/api/',
              description:
                'Datum Cloud provides a declarative API platform to create the infrastructure necessary to deploy and manage services with advanced networking capabilities.',
            }}
            detailed={true}
          />
          <Link
            link={{
              title: 'Slack',
              url: 'https://slack.datum.net/datum',
              description: 'Join the discussion on Slack.',
            }}
            detailed={true}
          />

          <!--
          <Link
            link={{
              title: 'Datum API',
              url: 'https://docs.datum.net/docs/api/',
              description:
                'Datum Cloud provides a declarative API platform to create the infrastructure necessary to deploy and manage services with advanced networking capabilities.',
              tags: ['api', 'kubernetes'],
              addedDate: new Date('2025-06-12'),
            }}
            detailed={true}
          />
          -->
        </ul>
      </Section>

      <!--
      {
        allPostsByDate.length > 0 && (
          <Section title="Posts">
            <ul class="flex flex-col gap-y-1.5 sm:gap-y-2">
              {allPostsByDate.map((p) => (
                <li class="flex flex-col gap-x-2 sm:flex-row">
                  <PostPreview post={p} />
                </li>
              ))}
            </ul>
            <Button title="More posts" class="w-fit self-end" href="/blog" style="ahead" />
          </Section>
        )
      }
      -->
    </div>
    <!-- <Quote class="mt-12" /> -->
  </main>
</PageLayout>
