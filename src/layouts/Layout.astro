---
import { SEO } from 'astro-seo';
import { formatISODate } from '@utils/dateUtils';
import type { LayoutProps } from '@/src/types/common';

const {
  title,
  description,
  image,
  article,
  publishDate,
  author,
  canonical,
  dataTheme = '',
  bodyClass = 'template',
  meta,
} = Astro.props as LayoutProps;

const mode = import.meta.env.MODE || process.env.NODE_ENV;
const pageUrl = Astro.url.href;
const defaultImage = new URL('/images/og-default.png', Astro.site).href;
const imageUrl = image ? new URL(image, Astro.site).href : defaultImage;

// Overwrite with meta
const titleValue = (meta && meta.title ? meta.title : title ? title : '').replace(/<[^>]*>/g, '');

const descriptionValue =
  meta && meta.description ? meta.description : description ? description : '';
---

<!doctype html>
<html lang="en" data-theme={dataTheme}>
  <head>
    <meta charset="UTF-8" />
    <link rel="sitemap" href="/sitemap.xml" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" href="/favicon.png" sizes="96x96" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="apple-mobile-web-app-title" content="Datum" />

    <!-- Preconnect to external domains for performance -->
    <link rel="preconnect" href="https://edge.marker.io" />

    <SEO
      title={titleValue}
      description={descriptionValue}
      canonical={canonical || pageUrl}
      noindex={mode === 'staging' ? true : false}
      nofollow={mode === 'staging' ? true : false}
      openGraph={{
        basic: {
          title: meta && meta.og && meta.og.title ? meta.og.title : title,
          type: article ? 'article' : 'website',
          image: meta && meta.og && meta.og.image ? meta.og.image : imageUrl,
          url: meta && meta.og && meta.og.url ? meta.og.url : canonical || pageUrl,
        },
        optional: {
          description: meta && meta.og && meta.og.description ? meta.og.description : description,
          siteName: 'Milo Site',
          locale: 'en_US',
        },
        ...(article && publishDate
          ? {
              article: {
                publishedTime: formatISODate(publishDate),
                authors: [author || 'Milo.'],
              },
            }
          : {}),
      }}
      extend={{
        meta: [
          { name: 'twitter:url', content: canonical || pageUrl },
          { name: 'theme-color', content: '#3b82f6' },
        ],
        link: [
          { rel: 'icon', href: '/favicon.png' },
          { rel: 'mask-icon', href: '/favicon.png' },
          { rel: 'apple-touch-icon', href: '/apple-touch-icon.png' },
        ],
      }}
    />

    <script type="text/javascript" defer is:inline>
      /* eslint @typescript-eslint/no-unused-expressions: "off" */
      !(function (e, t, n) {
        function a() {
          var e = t.getElementsByTagName('script')[0],
            n = t.createElement('script');
          ((n.type = 'text/javascript'),
            (n.async = !0),
            (n.src = 'https://beacon-v2.helpscout.net'),
            e.parentNode.insertBefore(n, e));
        }
        if (
          ((e.Beacon = n =
            function (t, n, a) {
              e.Beacon.readyQueue.push({ method: t, options: n, data: a });
            }),
          (n.readyQueue = []),
          'complete' === t.readyState)
        )
          return a();
        e.attachEvent ? e.attachEvent('onload', a) : e.addEventListener('load', a, !1);
      })(window, document, window.Beacon || function () {});
    </script>
    {
      import.meta.env.MODE === 'production' && (
        <script type="text/javascript" defer is:inline>
          window.Beacon('init', '57a7245e-772c-4d51-bdb1-6b898f34f2cb');
          {/* window.Beacon('identify', {
            name: 'user_full_name',
            email: 'user_email',
            signature: 'signature',
          }) */}
        </script>
      )
    }

    {import.meta.env.MODE === 'production' && <script src="/scripts/markerio.js" defer is:inline />}

    {
      import.meta.env.MODE === 'production' && (
        <script src="https://cdn.usefathom.com/script.js" data-site="PXKRQKIZ" defer is:inline />
      )
    }
  </head>
  <body class={bodyClass}>
    <slot />

    <script>
      import '/src/v1/scripts/lenis-parallax.js';
    </script>

    <script>
      import { getCookie, setCookie } from '@libs/cookie';
      document.addEventListener('DOMContentLoaded', function () {
        const ghButton = document.querySelectorAll('.gh-button');
        const starIcon = `<svg xmlns="http://www.w3.org/2000/svg" stroke-width="2" width="24" height="24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" fill="none" viewBox="0 0 24 24" class="lucide lucide-github h-5 w-5 stroke-1.5">  <path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"></path> <path d="M9 18c-4.51 2-5-2-7-2"></path></svg>`;
        updateStargazerCount();

        setInterval(() => {
          updateStargazerCount();
        }, 80000);

        async function updateStargazerCount() {
          const API_URL = `https://api.github.com/repos/datum-cloud/milo`;
          const response = await fetch(API_URL);
          // const rateLimitReset = response.headers.get('X-RateLimit-Reset');
          let formattedStarCount = null;

          if (response.ok) {
            const data = await response.json();
            const starCount = data.stargazers_count || 0;
            const formatter = new Intl.NumberFormat('en-US', { notation: 'compact' });
            formattedStarCount = formatter.format(starCount);
            setCookie('starCount', formattedStarCount, 60);
          } else if (getCookie('starCount')) {
            formattedStarCount = getCookie('starCount');
          } else {
            return;
          }

          ghButton.forEach((button) => {
            if (formattedStarCount == null) {
              return;
            }
            button.innerHTML = `${starIcon} ${formattedStarCount}`;
          });
        }
      });
    </script>
  </body>
</html>
