---
import project from 'virtual:starlight/project-context';
import Icon from '@components/Icon.astro';

const pagefindTranslations = {
  placeholder: Astro.locals.t('search.label'),
  ...Object.fromEntries(
    Object.entries(Astro.locals.t.all())
      .filter(([key]) => key.startsWith('pagefind.'))
      .map(([key, value]) => [key.replace('pagefind.', ''), value])
  ),
};

const dataAttributes: DOMStringMap = { 'data-translations': JSON.stringify(pagefindTranslations) };
if (project.trailingSlash === 'never') dataAttributes['data-strip-trailing-slash'] = '';
---

<site-search-modal class={Astro.props.class} {...dataAttributes}>
  <dialog style="padding:0" aria-label={Astro.locals.t('search.label')}>
    <div class="dialog-frame sl-flex" data-lenis-prevent>
      <button data-close-modal class="sl-flex" aria-label={Astro.locals.t('search.cancelLabel')}>
        <span>Close</span>
        <Icon name="x" size="sm" class="close-icon" />
      </button>
      {
        import.meta.env.DEV ? (
          <div style="margin: auto; text-align: center; white-space: pre-line;" dir="ltr">
            <p>{Astro.locals.t('search.devWarning')}</p>
          </div>
        ) : (
          <div class="search-container">
            <div id="starlight__search" />
          </div>
        )
      }
    </div>
  </dialog>
</site-search-modal>

<script>
  import { pagefindUserConfig } from 'virtual:starlight/pagefind-config';

  // Create a custom event for opening the search modal
  const SEARCH_MODAL_OPEN_EVENT = 'search-modal-open';
  const SEARCH_MODAL_CLOSE_EVENT = 'search-modal-close';

  // Add event names to window object
  declare global {
    interface Window {
      SEARCH_MODAL_OPEN_EVENT: string;
      SEARCH_MODAL_CLOSE_EVENT: string;
    }
  }

  class SiteSearchModal extends HTMLElement {
    dialog: HTMLDialogElement;
    dialogFrame: HTMLElement;
    closeBtn: HTMLButtonElement;
    dialogOpenedAt: number = 0;

    constructor() {
      super();
      this.dialog = this.querySelector('dialog')!;
      this.dialogFrame = this.querySelector('.dialog-frame')!;
      this.closeBtn = this.querySelector<HTMLButtonElement>('button[data-close-modal]')!;

      this.setupEventListeners();
      this.setupPagefind();
    }

    setupEventListeners() {
      // Listen for the custom event to open the modal
      document.addEventListener(SEARCH_MODAL_OPEN_EVENT, () => this.openModal());

      // Close button event listener
      this.closeBtn.addEventListener('click', () => this.closeModal());

      // Dialog close event
      this.dialog.addEventListener('close', () => {
        document.body.toggleAttribute('data-search-modal-open', false);
        window.removeEventListener('click', this.onClick);
        document.dispatchEvent(new CustomEvent(SEARCH_MODAL_CLOSE_EVENT));
      });

      // Listen for `ctrl + k` and `cmd + k` keyboard shortcuts
      window.addEventListener('keydown', (e) => {
        if ((e.metaKey === true || e.ctrlKey === true) && e.key === 'k') {
          if (this.dialog.open) {
            this.closeModal();
          } else {
            this.openModal();
          }
          e.preventDefault();
        }
      });
    }

    onClick = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      const isLink = 'href' in (target || {});
      const isOutsideDialog = document.body.contains(target) && !this.dialogFrame.contains(target);

      // Check if click is inside a dialog but outside dialog-frame
      const isInDialog = target.closest('dialog') !== null;
      const isInDialogFrame = target.closest('.dialog-frame') !== null;
      const isDialogBackdropClick = isInDialog && !isInDialogFrame;

      // Prevent closing if click happens too soon after opening (within 300ms)
      const clickTime = Date.now();
      const timeSinceOpen = clickTime - this.dialogOpenedAt;
      const isTooSoon = timeSinceOpen < 300;

      // Handle different click scenarios
      if (isDialogBackdropClick) {
        // This is a click on the dialog backdrop
        this.closeModal();
      } else if ((isLink || isOutsideDialog) && !isTooSoon) {
        // This is a click outside the dialog or on a link
        this.closeModal();
      }
    };

    openModal() {
      this.dialog.showModal();
      document.body.toggleAttribute('data-search-modal-open', true);
      this.querySelector('input')?.focus();

      // Record when the dialog was opened
      this.dialogOpenedAt = Date.now();

      // Add a small delay before adding the click listener to prevent immediate closing
      setTimeout(() => {
        window.addEventListener('click', this.onClick);
      }, 100);
    }

    closeModal() {
      this.dialog.close();
    }

    setupPagefind() {
      let translations = {};
      try {
        translations = JSON.parse(this.dataset.translations || '{}');
      } catch {
        // Ignore parsing errors and use empty object
      }

      const shouldStrip = this.dataset.stripTrailingSlash !== undefined;
      const stripTrailingSlash = (path: string) => path.replace(/(.)\/(#.*)?$/, '$1$2');
      const formatURL = shouldStrip ? stripTrailingSlash : (path: string) => path;

      window.addEventListener('DOMContentLoaded', () => {
        if (import.meta.env.DEV) return;
        const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
        onIdle(async () => {
          // @ts-expect-error â€” Missing types for @pagefind/default-ui package.
          const { PagefindUI } = await import('@pagefind/default-ui');
          new PagefindUI({
            ...pagefindUserConfig,
            element: '#starlight__search',
            baseUrl: import.meta.env.BASE_URL,
            bundlePath: import.meta.env.BASE_URL.replace(/\/$/, '') + '/pagefind/',
            showImages: false,
            translations,
            showSubResults: true,
            processResult: (result: { url: string; sub_results: Array<{ url: string }> }) => {
              result.url = formatURL(result.url);
              result.sub_results = result.sub_results.map((sub_result) => {
                sub_result.url = formatURL(sub_result.url);
                return sub_result;
              });
            },
          });
        });
      });
    }
  }

  customElements.define('site-search-modal', SiteSearchModal);

  // Export the event names for other components to use
  window.SEARCH_MODAL_OPEN_EVENT = SEARCH_MODAL_OPEN_EVENT;
  window.SEARCH_MODAL_CLOSE_EVENT = SEARCH_MODAL_CLOSE_EVENT;
</script>

<style>
  @layer starlight.core {
    site-search-modal {
      display: contents;
    }

    dialog {
      margin: 0;
      background-color: var(--sl-color-dialog);
      border: 1px solid var(--sl-color-dialog-border);
      width: 100%;
      max-width: 100%;
      height: 100%;
      max-height: 100%;
      box-shadow: var(--sl-shadow-lg);
    }
    dialog[open] {
      display: flex;
    }

    dialog::backdrop {
      background-color: var(--sl-color-backdrop-overlay);
      -webkit-backdrop-filter: blur(0.25rem);
      backdrop-filter: blur(0.25rem);
    }

    .dialog-frame {
      position: relative;
      overflow: auto;
      flex-direction: column;
      flex-grow: 1;
      gap: 1rem;
      padding: 1rem;
    }

    button[data-close-modal] {
      position: absolute;
      z-index: 1;
      align-items: center;
      justify-content: center;
      align-self: flex-end;
      top: 2rem;
      right: 0.75rem;
      height: 1.5rem;
      padding: 0.25rem;
      border: 0;
      border-radius: 0.25rem;
      background: transparent;
      cursor: pointer;
      color: var(--sl-color-text-accent);
      transition: background-color 0.2s ease;
    }

    button[data-close-modal] span {
      color: var(--sl-color-text);
      font-size: 12px;
      display: inline-block;
      padding-right: 0.3rem;
    }

    button[data-close-modal]:hover {
      background-color: var(--sl-color-gray-5);
      color: var(--sl-color-white);
    }

    button[data-close-modal] .close-icon {
      width: 1.25rem;
      height: 1.25rem;
    }

    #starlight__search {
      --pagefind-ui-primary: var(--sl-color-text);
      --pagefind-ui-text: var(--sl-color-gray-2);
      --pagefind-ui-font: var(--__sl-font);
      --pagefind-ui-background: var(--sl-color-black);
      --pagefind-ui-border: var(--sl-color-gray-5);
      --pagefind-ui-border-width: 1px;
      --pagefind-ui-tag: var(--sl-color-gray-5);
      --sl-search-cancel-space: 80px;
    }

    :root[data-theme='light'] #starlight__search {
      --pagefind-ui-tag: var(--sl-color-gray-6);
    }

    @media (min-width: 40rem) {
      #starlight__search {
        --sl-search-cancel-space: 120px;
      }

      button[data-close-modal] {
        top: 2.25rem;
      }

      dialog {
        margin: 4rem auto auto;
        border-radius: 0.5rem;
        width: 90%;
        max-width: 40rem;
        height: max-content;
        min-height: 15rem;
        max-height: calc(100% - 8rem);
      }

      .dialog-frame {
        padding: 1.5rem;
      }
    }
  }
</style>

<style is:global>
  @import url('@pagefind/default-ui/css/ui.css') layer(starlight.core);

  @layer starlight.core {
    [data-search-modal-open] {
      overflow: hidden;
    }

    #starlight__search {
      --sl-search-result-spacing: calc(1.25rem * var(--pagefind-ui-scale));
      --sl-search-result-pad-inline-start: calc(1.75rem * var(--pagefind-ui-scale));
      --sl-search-result-pad-inline-end: calc(1.75rem * var(--pagefind-ui-scale));
      --sl-search-result-pad-block: calc(0.9375rem * var(--pagefind-ui-scale));
      --sl-search-result-nested-pad-block: calc(0.625rem * var(--pagefind-ui-scale));
      --sl-search-corners: calc(0.3125rem * var(--pagefind-ui-scale));
      --sl-search-page-icon-size: calc(1.875rem * var(--pagefind-ui-scale));
      --sl-search-page-icon-inline-start: calc(
        (var(--sl-search-result-pad-inline-start) - var(--sl-search-page-icon-size)) / 2
      );
      --sl-search-tree-diagram-size: calc(2.5rem * var(--pagefind-ui-scale));
      --sl-search-tree-diagram-inline-start: calc(
        (var(--sl-search-result-pad-inline-start) - var(--sl-search-tree-diagram-size)) / 2
      );
    }

    #starlight__search .pagefind-ui__form::before {
      --pagefind-ui-text: var(--sl-color-gray-1);
      background-color: var(--sl-color-text-accent);
      opacity: 1;

      -webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='lucide lucide-search-icon lucide-search'%3E%3Cpath d='m21 21-4.34-4.34'/%3E%3Ccircle cx='11' cy='11' r='8'/%3E%3C/svg%3E")
        center;
      mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='lucide lucide-search-icon lucide-search'%3E%3Cpath d='m21 21-4.34-4.34'/%3E%3Ccircle cx='11' cy='11' r='8'/%3E%3C/svg%3E")
        center;
    }

    #starlight__search .pagefind-ui__search-input {
      color: var(--sl-color-white);
      font-weight: 400;
      width: calc(100% - var(--sl-search-cancel-space));
    }

    #starlight__search input:focus {
      outline: none;
      --pagefind-ui-border: var(--sl-color-gray-2);
    }

    #starlight__search .pagefind-ui__search-clear {
      inset-inline-end: var(--sl-search-cancel-space);
      width: calc(60px * var(--pagefind-ui-scale));
      padding: 0;
      background-color: transparent;
      overflow: hidden;
    }
    #starlight__search .pagefind-ui__search-clear:focus {
      outline: 1px solid var(--sl-color-accent);
    }
    #starlight__search .pagefind-ui__search-clear::before {
      content: '';
      -webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='lucide lucide-x-icon lucide-x'%3E%3Cpath d='M18 6 6 18'/%3E%3Cpath d='m6 6 12 12'/%3E%3C/svg%3E")
        center / 50% no-repeat;
      mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='lucide lucide-x-icon lucide-x'%3E%3Cpath d='M18 6 6 18'/%3E%3Cpath d='m6 6 12 12'/%3E%3C/svg%3E")
        center / 50% no-repeat;
      background-color: #90969c;
      display: block;
      width: 100%;
      height: 100%;
    }

    #starlight__search .pagefind-ui__results > * + * {
      margin-top: var(--sl-search-result-spacing);
    }
    #starlight__search .pagefind-ui__result {
      border: 0;
      padding: 0;
    }

    #starlight__search .pagefind-ui__result-nested {
      position: relative;
      padding: var(--sl-search-result-nested-pad-block) var(--sl-search-result-pad-inline-end);
      padding-inline-start: calc(1.35 * var(--sl-search-result-pad-inline-start));
      background-color: transparent;
    }

    #starlight__search .pagefind-ui__result-title:not(:where(.pagefind-ui__result-nested *)),
    #starlight__search .pagefind-ui__result-nested {
      position: relative;
      background-color: transparent;
    }

    #starlight__search .pagefind-ui__result-title:not(:where(.pagefind-ui__result-nested *)):hover,
    #starlight__search
      .pagefind-ui__result-title:not(:where(.pagefind-ui__result-nested *)):focus-within,
    #starlight__search .pagefind-ui__result-nested:hover,
    #starlight__search .pagefind-ui__result-nested:focus-within {
      background-color: var(--sl-color-black);
    }

    #starlight__search
      .pagefind-ui__result-title:not(:where(.pagefind-ui__result-nested *)):focus-within,
    #starlight__search .pagefind-ui__result-nested:focus-within {
      background-color: var(--sl-color-accent-low);
    }

    #starlight__search .pagefind-ui__result-thumb,
    #starlight__search .pagefind-ui__result-inner {
      margin-top: 0;
    }

    #starlight__search .pagefind-ui__result-inner > :first-child {
      border-radius: var(--sl-search-corners) var(--sl-search-corners) 0 0;
    }
    #starlight__search .pagefind-ui__result-inner > :last-child {
      border-radius: 0 0 var(--sl-search-corners) var(--sl-search-corners);
    }

    #starlight__search .pagefind-ui__result-inner > .pagefind-ui__result-title {
      padding: var(--sl-search-result-pad-block) var(--sl-search-result-pad-inline-end);
      padding-inline-start: calc(1.35 * var(--sl-search-result-pad-inline-start));
      background-color: transparent;
    }
    #starlight__search .pagefind-ui__result-inner > .pagefind-ui__result-title::before {
      content: '';
      position: absolute;
      inset-block: 0;
      inset-inline-start: var(--sl-search-page-icon-inline-start);
      width: var(--sl-search-page-icon-size);
      background-color: var(--sl-color-text-accent);
      -webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='currentColor' viewBox='0 0 24 24'%3E%3Cpath stroke-width='1' d='M9 10h1a1 1 0 1 0 0-2H9a1 1 0 0 0 0 2Zm0 2a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2H9Zm11-3V8l-6-6a1 1 0 0 0-1 0H7a3 3 0 0 0-3 3v14a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V9Zm-6-4 3 3h-2a1 1 0 0 1-1-1V5Zm4 14a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h5v3a3 3 0 0 0 3 3h3v9Zm-3-3H9a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2Z'/%3E%3C/svg%3E")
        center no-repeat;
      mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='currentColor' viewBox='0 0 24 24'%3E%3Cpath stroke-width='1' d='M9 10h1a1 1 0 1 0 0-2H9a1 1 0 0 0 0 2Zm0 2a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2H9Zm11-3V8l-6-6a1 1 0 0 0-1 0H7a3 3 0 0 0-3 3v14a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V9Zm-6-4 3 3h-2a1 1 0 0 1-1-1V5Zm4 14a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h5v3a3 3 0 0 0 3 3h3v9Zm-3-3H9a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2Z'/%3E%3C/svg%3E")
        center no-repeat;
    }

    #starlight__search .pagefind-ui__result-inner {
      align-items: stretch;
      gap: 1px;
    }

    #starlight__search .pagefind-ui__result-link {
      position: unset;
      --pagefind-ui-text: var(--sl-color-white);
      font-weight: 600;
    }

    #starlight__search .pagefind-ui__result-link:hover {
      text-decoration: none;
    }

    #starlight__search .pagefind-ui__result-nested .pagefind-ui__result-link::before {
      content: unset;
    }

    #starlight__search .pagefind-ui__result-nested::before {
      content: '';
      position: absolute;
      inset-block: 0;
      inset-inline-start: var(--sl-search-tree-diagram-inline-start);
      width: var(--sl-search-tree-diagram-size);
      background: var(--sl-color-gray-4);
      -webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='currentColor' stroke-linecap='round' viewBox='0 0 16 1000' preserveAspectRatio='xMinYMin slice'%3E%3Cpath d='M8 0v1000m6-988H8'/%3E%3C/svg%3E")
        0% 0% / 100% no-repeat;
      mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='currentColor' stroke-linecap='round' viewBox='0 0 16 1000' preserveAspectRatio='xMinYMin slice'%3E%3Cpath d='M8 0v1000m6-988H8'/%3E%3C/svg%3E")
        0% 0% / 100% no-repeat;
    }
    #starlight__search .pagefind-ui__result-nested:last-of-type::before {
      -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' viewBox='0 0 16 16'%3E%3Cpath d='M8 0v12m6 0H8'/%3E%3C/svg%3E");
      mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' viewBox='0 0 16 16'%3E%3Cpath d='M8 0v12m6 0H8'/%3E%3C/svg%3E");
    }

    /* Flip page and tree icons around the vertical axis when in an RTL layout. */
    [dir='rtl'] .pagefind-ui__result-title::before,
    [dir='rtl'] .pagefind-ui__result-nested::before {
      transform: matrix(-1, 0, 0, 1, 0, 0);
    }

    #starlight__search .pagefind-ui__result-link::after {
      content: '';
      position: absolute;
      inset: 0;
    }

    #starlight__search .pagefind-ui__result-excerpt {
      font-size: calc(1rem * var(--pagefind-ui-scale));
      overflow-wrap: anywhere;
      color: var(--sl-color-text-search);
    }

    #starlight__search mark {
      color: var(--sl-color-gray-2);
      background-color: transparent;
      font-weight: 600;
    }

    #starlight__search .pagefind-ui__filter-value::before {
      border-color: var(--sl-color-text-invert);
    }

    #starlight__search .pagefind-ui__result-tags {
      background-color: var(--sl-color-black);
      margin-top: 0;
      padding: var(--sl-search-result-nested-pad-block) var(--sl-search-result-pad-inline-end);
    }
  }
</style>
