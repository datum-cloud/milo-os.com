---
// import Icon from '@astrojs/starlight/user-components/Icon.astro';
import Icon from '@components/Icon.astro';
---

<starlight-menu-button class="print:hidden">
  <button
    aria-expanded="false"
    aria-label={Astro.locals.t('menuButton.accessibleLabel')}
    aria-controls="starlight__sidebar"
    class="sl-mobile-menu-toggle"
  >
    <Icon name="menu" size="lg" class="open-menu" />
    <Icon name="x" size="lg" class="close-menu" />
  </button>
</starlight-menu-button>

<script>
  class StarlightMenuButton extends HTMLElement {
    btn = this.querySelector('button')!;

    constructor() {
      super();
      // Toggle `aria-expanded` state when a user clicks the button.
      this.btn.addEventListener('click', () => this.toggleExpanded());

      // Close the menu when a user presses the escape key.
      const parentNav = this.closest('nav');
      if (parentNav) {
        parentNav.addEventListener('keyup', (e) => this.closeOnEscape(e));
      }

      // Ensure Escape closes the menu even when focus is outside the nav/sidebar.
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' || (e as KeyboardEvent).code === 'Escape') {
          if (this.getAttribute('aria-expanded') === 'true') {
            this.setExpanded(false);
            this.btn.focus();
          }
        }
      });
    }

    setExpanded(expanded: boolean) {
      this.setAttribute('aria-expanded', String(expanded));
      this.btn.setAttribute('aria-expanded', String(expanded));
      document.body.toggleAttribute('data-mobile-menu-expanded', expanded);
      document.body.toggleAttribute('data-disable-lenis', expanded);

      if (expanded) {
        document.body.classList.add('mobile-menu-open');
        document.body.style.overflow = 'hidden';
      } else {
        document.body.classList.remove('mobile-menu-open');
        document.body.style.overflow = '';
      }
    }

    toggleExpanded() {
      this.setExpanded(this.getAttribute('aria-expanded') !== 'true');
    }

    closeOnEscape(e: KeyboardEvent) {
      if (e.code === 'Escape') {
        this.setExpanded(false);
        this.btn.focus();
      }
    }
  }

  customElements.define('starlight-menu-button', StarlightMenuButton);
</script>

<style>
  @layer starlight.core {
    [aria-expanded='true'] button {
      background-color: var(--sl-color-gray-2);
      box-shadow: none;
    }

    [aria-expanded='true'] button .open-menu {
      display: none;
    }

    :not([aria-expanded='true']) button .close-menu {
      display: none;
    }
  }
</style>
